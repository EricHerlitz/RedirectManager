@inherits System.Web.WebPages.WebPage
@using EPiServer.Framework.Web.Resources
@using EPiServer.Shell.Navigation
@using EPiServer.ServiceLocation
@using WebProject.Redirects
@{ OnLoad(); }
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Redirect Manager</title>

    <script src="//code.jquery.com/jquery-2.1.1.min.js"></script>

    @Html.Raw(ClientResources.RenderResources("ShellCore"))
    @Html.Raw(ClientResources.RenderResources("ShellWidgets"))
		
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
    <!-- Optional theme -->
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
    <!-- Latest compiled and minified JavaScript -->
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

</head>
<body>

		@Html.Raw(MenuHelper.CreateGlobalMenu("/global", "/global/cms/redirects"))

    <div class="container">

        @if (!RedirectRuleStorage.TableExist)
        {
            <div class="panel panel-danger">
                <div class="panel-heading">Table @(RedirectRuleStorage.RedirectTableName) does not exist!</div>
                <div class="panel-body">
                    <a class="btn btn-default" href="@(Request.Url.AbsolutePath)?action=createtable">Create Table @(RedirectRuleStorage.RedirectTableName)</a>
                </div>
            </div>
        }

        <div class="panel  @(Request.Params["action"] == "select" ? "panel-info" : "panel-success")">
            <div class="panel-heading">
                <b class="panel-title"><a href="#" data-toggle="collapse" data-target="#addPanel">@(Request.Params["action"] == "select" ? "Modify redirect rule" : "Add new redirect rule")</a></b>
            </div>
            <div id="addPanel" class="panel-collapse panel-body collapse in">
                <form class="form-inline row" method="GET" action="@(Request.Url.AbsolutePath)">
                    <input type="hidden" name="action" value="@(Request.Params["action"]=="select" ? "modify" : "add")"/>
                    <input type="hidden" name="id" value="@(Request.Params["id"])"/>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="">Sort Order</label>
                            <input type="number" class="form-control" style="width:80px;" name="sortorder" placeholder="1" value="@(CurrentRedirect == null ? 0 : CurrentRedirect.SortOrder)">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="">From Url</label>
                            <input type="text" class="form-control" name="fromurl" placeholder="/example/redirect" value="@(CurrentRedirect == null ? null : CurrentRedirect.FromUrl)">
                        </div>
                        <div class="form-group">
                            <label for="">Wildcard</label>
                            <input type="checkbox" class="form-control checkbox" style="width: 17px; height: 17px;" name="wildcard" value="true" @(CurrentRedirect == null ? null : CurrentRedirect.Wildcard ? "checked" : null)>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="">To Url</label>
                            <input type="text" class="form-control" name="tourl" placeholder="/redirect/to" value="@(CurrentRedirect == null ? null : CurrentRedirect.ToUrl)">
                        </div>
                        <span style="font-size:9pt">or</span><br />
                        <div class="form-group">
                            <label for="">To Content Id</label>
                            <input type="number" class="form-control" style="width:90px;" name="tocontentid" placeholder="1" value="@(CurrentRedirect == null ? 0 : CurrentRedirect.ToContentId)">
                        </div>
                        <div class="form-group">
                            <label for="">Language</label>
                            <select class="form-control" name="tocontentlang">
                                @{
                                    var languageOptions = new [] { "" }.Concat(RedirectService.GetGlobalLanguageOptions());
                                    var selectedLang = CurrentRedirect != null ? CurrentRedirect.ToContentLang ?? "" : ""; 
                                }
                                @foreach (string lang in languageOptions)
                                {
                                    <option @(selectedLang == lang? "selected" : "")>@lang</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn @(Request.Params["action"] == "select" ? "btn-info" : "btn-success")">Save</button>
                        @if (Request.Params["action"] == "select")
                        {
                            <a href="@Request.Url.AbsolutePath" class="btn btn-warning">Cancel</a>
                        }
                    </div>
                </form>
            </div>
        </div>         

        <div>
            <table class="table table-condensed table-hover">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>From Url</th>
                        <th>Wildcard</th>
                        <th>To Url</th>
                        <th>To Content Id</th>
                        <th>Lang</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in RedirectService.List())
                    {
                    <tr>
                        <td>@(result.SortOrder)</td>
                        <td><b>@(result.FromUrl)</b></td>
                        <td><input type="checkbox" class="checkbox" style="width: 17px; height: 17px;" @(result.Wildcard ? "checked" : null) disabled/></td>
                        <td><b>@(result.ToUrl)</b></td>
                        <td><b>@(result.ToContentId)</b></td>
                        <td>@(result.ToContentLang)</td>
                        <td>
                            <a class="btn btn-sm btn-info" href="@(string.Format("{0}?action=select&id={1}", Request.Url.AbsolutePath, result.Id))">MODIFY</a>
                            <a class="btn btn-sm btn-danger" href="@(string.Format("{0}?action=delete&id={1}", Request.Url.AbsolutePath, result.Id))" onclick="return confirm('Are you sure you want to delete this item?');">DELETE</a>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">
                <b class="panel-title"><a href="#" data-toggle="collapse" data-target="#instructionsPanel">Instructions</a></b>
            </div>
            <div id="instructionsPanel" class="panel-collapse panel-body collapse">
                <p>Redirect Manager allows to add, modify and remove <b>permanent redirection rules</b> (alias HTTP 301, Moved Permanently).</p>
                <p>Rules are redirected in 404 handler, so all the pages and static content overrides these rules.</p>
                <p>Url addresses are <b>NOT case sensitive</b>. Also the <b>trailing slash (/) in urls' is removed</b> before rule's are applied.</p>
                <p>Wildcard rules redirect all the addresses that starts with the from url address.</p>
                <p>Be careful, it's possible to create eternal loop and damage the service.</p>
            </div>
        </div>
    </div>
</body>
</html>

@functions{

    public RedirectService RedirectService = ServiceLocator.Current.GetInstance<RedirectService>();
    public RedirectRule CurrentRedirect = null;

    protected void OnLoad()
    {
        if (!string.IsNullOrEmpty(Request.Params["id"]))
        {
            var id = Request.Params["id"].ParseIntOrDefault();
            if (id.HasValue)
            {
                CurrentRedirect = RedirectService.GetRedirect(id.Value);
            }
        }
        if (Request.Params["action"] == "add")
        {
            int n = RedirectService.AddRedirect(Request.Params["sortorder"].ParseIntOrDefault(),
                                                Request.Params["fromurl"],
                                                Request.Params["wildcard"].ParseBoolOrDefault(), 
                                                Request.Params["tourl"],
                                                Request.Params["tocontentid"].ParseIntOrDefault(),
                                                Request.Params["tocontentlang"]
                                                );
            if (n > 0)
            {
                Response.Redirect(Request.Url.AbsolutePath);
            }
        }
        if (Request.Params["action"] == "modify")
        {
            if (CurrentRedirect != null)
            {
                int n = RedirectService.ModifyRedirect( CurrentRedirect.Id,
                                                        Request.Params["sortorder"].ParseIntOrDefault(),
                                                        Request.Params["fromurl"],
                                                        Request.Params["wildcard"].ParseBoolOrDefault(), 
                                                        Request.Params["tourl"],
                                                        Request.Params["tocontentid"].ParseIntOrDefault(),
                                                        Request.Params["tocontentlang"]
                                                        );
                if (n > 0)
                {
                    Response.Redirect(Request.Url.AbsolutePath);
                }
            }
        }
        if (Request.Params["action"] == "delete")
        {
            if (CurrentRedirect != null)
            {
                int n = RedirectService.DeleteRedirect(CurrentRedirect.Id);
                if (n > 0)
                {
                    Response.Redirect(Request.Url.AbsolutePath);
                }
            }
        }

        if (Request.Params["action"] == "createtable")
        {
            RedirectRuleStorage.CreateTable();
            Response.Redirect(Request.Url.AbsolutePath);
        }

    }

}